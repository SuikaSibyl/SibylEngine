 #version 450

struct Particle
{
    vec4 pos;
    vec4 vel;
};

layout(set = 0, binding = 0, std430) buffer Particles
{
    Particle particle[];
} particles;

struct Counter
{
    uint aliveCount;
    uint deadCount;
    uint emitCount;
    uint drawCount;
    uint maxCount;
};
layout(set = 0, binding = 1, std430) buffer Counters
{
    Counter counter[];
} counter;


layout(set = 0, binding = 2, std430) buffer LiveIndexBuffer
{
    uint[] indices;
} livePool;

layout(set = 0, binding = 3, std430) buffer DeadIndexBuffer
{
    uint[] indices;
} deadPool;

struct DrawIndexedIndirect
{
    uint indexCount;
    uint instanceCount;
    uint firstIndex;
    int  vertexOffset;
    uint firstInstance;
};

layout(set = 0, binding = 4, std430) buffer IndirectDrawBuffer
{
    DrawIndexedIndirect[] content;
} IndirectBuffer;

layout (local_size_x =512) in;

void main()
{
    if(gl_GlobalInvocationID.x >= counter.counter[0].aliveCount) return;

    uint idx = gl_GlobalInvocationID.x;

    if(idx==0)
    {
        if(counter.counter[0].deadCount > counter.counter[0].maxCount)
            counter.counter[0].deadCount = 0;
    }

    memoryBarrier();
    barrier();

    Particle particle = particles.particle[idx];
    float ground_height = 0;

    // update velocity
    // - linear drag
    float mass = particle.vel.w;
    vec3 a = - 2 * normalize(particle.vel.xyz) * (length(particle.vel.xyz));;
    // - gravity
    if(particle.pos.y - ground_height > 0.02)
        a += vec3(0, -9.81, 0);
    particle.vel.xyz += 0.02 * a / mass;

    // update position
    particle.pos.xyz = particle.pos.xyz + particle.vel.xyz * 0.02;

    // collision handling
    if(particle.pos.y < ground_height)
    {
        vec3 compensate = particle.vel.xyz * ((ground_height - particle.pos.y) / particle.vel.y);
        particle.pos.xyz += compensate;
        particle.pos.y = ground_height;
        particle.vel.xyz += - 2 * vec3(0,1,0) * dot(particle.vel.xyz, vec3(0,1,0));
        particle.vel.xyz *= 0.5;
        // todo: roughness to randomize return velocity
    }

    float lifetime = particle.pos.w;
    lifetime -= 1;
    if(lifetime <= 0)
    {
        uint deadCount = atomicAdd(counter.counter[0].deadCount, 1);
        deadPool.indices[deadCount] = idx;
        uint aliveCount = atomicAdd(counter.counter[0].aliveCount, -1);
        livePool.indices[idx] = livePool.indices[aliveCount-1];
    }
    particle.pos.w = lifetime;
    particles.particle[idx] = particle;
    
    memoryBarrier();
    barrier();

    if(idx==0)
    {
        uint aliveCount = atomicAdd(counter.counter[0].aliveCount, 0);
        IndirectBuffer.content[0].instanceCount = aliveCount;
    }
}
